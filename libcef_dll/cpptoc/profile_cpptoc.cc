// Copyright (c) 2010 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// A portion of this file was generated by the CEF translator tool.  When
// making changes by hand only do so within the body of existing function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//

#include "libcef_dll/cpptoc/browser_cpptoc.h"
#include "libcef_dll/cpptoc/profile_cpptoc.h"
#include "libcef_dll/ctocpp/browser_listener_ctocpp.h"
#include "libcef_dll/ctocpp/tab_listener_ctocpp.h"


// MEMBER FUNCTIONS - Body may be edited by hand.

void CEF_CALLBACK profile_add_browser_listener(struct _cef_profile_t* self,
    const wchar_t* id_string, cef_browser_listener_t* listener)
{
  DCHECK(self && listener);
  if(!self || !listener)
    return;

  std::wstring idStringStr;
  if(id_string)
    idStringStr = id_string;

  CefProfileCppToC::Get(self)->AddBrowserListener(idStringStr,
      CefBrowserListenerCToCpp::Wrap(listener));
}

void CEF_CALLBACK profile_remove_browser_listener(struct _cef_profile_t* self,
    const wchar_t* id_string)
{
  DCHECK(self);
  if(!self)
    return;

  std::wstring idStringStr;
  if(id_string)
    idStringStr = id_string;

  CefProfileCppToC::Get(self)->RemoveBrowserListener(idStringStr);
}

void CEF_CALLBACK profile_add_tab_listener(struct _cef_profile_t* self,
    const wchar_t* id_string, cef_tab_listener_t* listener)
{
  DCHECK(self && listener);
  if(!self || !listener)
    return;

  std::wstring idStringStr;
  if(id_string)
    idStringStr = id_string;

  CefProfileCppToC::Get(self)->AddTabListener(idStringStr,
      CefTabListenerCToCpp::Wrap(listener));
}

void CEF_CALLBACK profile_remove_tab_listener(struct _cef_profile_t* self,
    const wchar_t* id_string)
{
  DCHECK(self);
  if(!self)
    return;

  std::wstring idStringStr;
  if(id_string)
    idStringStr = id_string;

  CefProfileCppToC::Get(self)->RemoveTabListener(idStringStr);
}

void CEF_CALLBACK profile_destroy(struct _cef_profile_t* self)
{
  DCHECK(self);
  if(!self)
    return;

  CefProfileCppToC::Get(self)->Destroy();
}

struct _cef_browser_t* CEF_CALLBACK profile_create_browser(
    struct _cef_profile_t* self, const wchar_t* id_string,
    cef_window_handle_t parent, int xpos, int ypos, int width, int height,
    const wchar_t* command_line)
{
  DCHECK(self);
  if(!self)
    return NULL;

  std::wstring idStringStr, commandLineStr;

  if(id_string)
    idStringStr = id_string;
  if(command_line)
    commandLineStr = command_line;

  CefRefPtr<CefProfile> profilePtr = CefProfileCppToC::Get(self);
  CefRefPtr<CefBrowser> browserPtr = profilePtr->CreateBrowser(idStringStr,
      parent, xpos, ypos, width, height, commandLineStr);
  if(browserPtr.get())
    return CefBrowserCppToC::Wrap(browserPtr);
  return NULL; 
}


// CONSTRUCTOR - Do not edit by hand.

CefProfileCppToC::CefProfileCppToC(CefProfile* cls)
    : CefCppToC<CefProfileCppToC, CefProfile, cef_profile_t>(cls)
{
  struct_.struct_.add_browser_listener = profile_add_browser_listener;
  struct_.struct_.remove_browser_listener = profile_remove_browser_listener;
  struct_.struct_.add_tab_listener = profile_add_tab_listener;
  struct_.struct_.remove_tab_listener = profile_remove_tab_listener;
  struct_.struct_.destroy = profile_destroy;
  struct_.struct_.create_browser = profile_create_browser;
}

#ifdef _DEBUG
long CefCppToC<CefProfileCppToC, CefProfile, cef_profile_t>::DebugObjCt = 0;
#endif

