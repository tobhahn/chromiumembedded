// Copyright (c) 2010 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// A portion of this file was generated by the CEF translator tool.  When
// making changes by hand only do so within the body of existing function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//

#include "libcef_dll/cpptoc/browser_cpptoc.h"
#include "libcef_dll/cpptoc/profile_cpptoc.h"
#include "libcef_dll/cpptoc/tab_cpptoc.h"


// MEMBER FUNCTIONS - Body may be edited by hand.

cef_profile_t* CEF_CALLBACK browser_get_profile(struct _cef_browser_t* self)
{
  DCHECK(self);
  if(!self)
    return NULL;

  CefRefPtr<CefBrowser> browserPtr = CefBrowserCppToC::Get(self);
  CefRefPtr<CefProfile> profilePtr = browserPtr->GetProfile();
  if(profilePtr.get())
    return CefProfileCppToC::Wrap(profilePtr);
  return NULL;
}

void CEF_CALLBACK browser_destroy(struct _cef_browser_t* self)
{
  DCHECK(self);
  if(!self)
    return;

  CefBrowserCppToC::Get(self)->Destroy();
}

cef_string_t CEF_CALLBACK browser_get_id_string(struct _cef_browser_t* self)
{
  DCHECK(self);
  if(!self)
    return NULL;

  std::wstring idStr = CefBrowserCppToC::Get(self)->GetIdString();
  if(!idStr.empty())
    return cef_string_alloc(idStr.c_str());
  return NULL;
}

cef_window_handle_t CEF_CALLBACK browser_get_window_handle(
    struct _cef_browser_t* self)
{
  DCHECK(self);
  if(!self)
    return NULL;

  return CefBrowserCppToC::Get(self)->GetWindowHandle();
}

struct _cef_tab_t* CEF_CALLBACK browser_create_tab(struct _cef_browser_t* self,
    int index, const wchar_t* url, const wchar_t* referrer, int foreground)
{
  DCHECK(self);
  if(!self)
    return NULL;

  std::wstring urlStr, referrerStr;

  if(url)
    urlStr = url;
  if(referrer)
    referrerStr = referrer;

  CefRefPtr<CefBrowser> browserPtr = CefBrowserCppToC::Get(self);
  CefRefPtr<CefTab> tabPtr = browserPtr->CreateTab(index, urlStr, referrerStr,
      foreground?true:false);
  if(tabPtr.get())
    return CefTabCppToC::Wrap(tabPtr);
  return NULL;
}

int CEF_CALLBACK browser_get_tab_count(struct _cef_browser_t* self)
{
  DCHECK(self);
  if(!self)
    return -1;

  return CefBrowserCppToC::Get(self)->GetTabCount();
}

struct _cef_tab_t* CEF_CALLBACK browser_get_tab(struct _cef_browser_t* self,
    int index)
{
  DCHECK(self);
  if(!self)
    return NULL;

  CefRefPtr<CefBrowser> browserPtr = CefBrowserCppToC::Get(self);
  CefRefPtr<CefTab> tabPtr = browserPtr->GetTab(index);
  if(tabPtr.get())
    return CefTabCppToC::Wrap(tabPtr);
  return NULL;
}

struct _cef_tab_t* CEF_CALLBACK browser_get_selected_tab(
    struct _cef_browser_t* self)
{
  DCHECK(self);
  if(!self)
    return NULL;

  CefRefPtr<CefBrowser> browserPtr = CefBrowserCppToC::Get(self);
  CefRefPtr<CefTab> tabPtr = browserPtr->GetSelectedTab();
  if(tabPtr.get())
    return CefTabCppToC::Wrap(tabPtr);
  return NULL;
}


// CONSTRUCTOR - Do not edit by hand.

CefBrowserCppToC::CefBrowserCppToC(CefBrowser* cls)
    : CefCppToC<CefBrowserCppToC, CefBrowser, cef_browser_t>(cls)
{
  struct_.struct_.get_profile = browser_get_profile;
  struct_.struct_.destroy = browser_destroy;
  struct_.struct_.get_id_string = browser_get_id_string;
  struct_.struct_.get_window_handle = browser_get_window_handle;
  struct_.struct_.create_tab = browser_create_tab;
  struct_.struct_.get_tab_count = browser_get_tab_count;
  struct_.struct_.get_tab = browser_get_tab;
  struct_.struct_.get_selected_tab = browser_get_selected_tab;
}

#ifdef _DEBUG
long CefCppToC<CefBrowserCppToC, CefBrowser, cef_browser_t>::DebugObjCt = 0;
#endif

