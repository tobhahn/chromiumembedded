// Copyright (c) 2010 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// A portion of this file was generated by the CEF translator tool.  When
// making changes by hand only do so within the body of existing function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//

#include "libcef_dll/cpptoc/browser_cpptoc.h"
#include "libcef_dll/cpptoc/tab_cpptoc.h"


// MEMBER FUNCTIONS - Body may be edited by hand.

cef_browser_t* CEF_CALLBACK tab_get_browser(struct _cef_tab_t* self)
{
  DCHECK(self);
  if(!self)
    return NULL;

  CefRefPtr<CefTab> tabPtr = CefTabCppToC::Get(self);
  CefRefPtr<CefBrowser> browserPtr = tabPtr->GetBrowser();
  if(browserPtr.get())
    return CefBrowserCppToC::Wrap(browserPtr);
  return NULL;
}

void CEF_CALLBACK tab_destroy(struct _cef_tab_t* self)
{
  DCHECK(self);
  if(!self)
    return;

  CefTabCppToC::Get(self)->Destroy();
}

int CEF_CALLBACK tab_get_index(struct _cef_tab_t* self)
{
  DCHECK(self);
  if(!self)
    return -1;

  return CefTabCppToC::Get(self)->GetIndex();
}

int CEF_CALLBACK tab_is_selected(struct _cef_tab_t* self)
{
  DCHECK(self);
  if(!self)
    return false;

  return CefTabCppToC::Get(self)->IsSelected();
}

void CEF_CALLBACK tab_select(struct _cef_tab_t* self)
{
  DCHECK(self);
  if(!self)
    return;

  CefTabCppToC::Get(self)->Select();
}

int CEF_CALLBACK tab_can_go_back(struct _cef_tab_t* self)
{
  DCHECK(self);
  if(!self)
    return false;

  return CefTabCppToC::Get(self)->CanGoBack();
}

void CEF_CALLBACK tab_go_back(struct _cef_tab_t* self)
{
  DCHECK(self);
  if(!self)
    return;

  CefTabCppToC::Get(self)->GoBack();
}

int CEF_CALLBACK tab_can_go_forward(struct _cef_tab_t* self)
{
  DCHECK(self);
  if(!self)
    return false;

  return CefTabCppToC::Get(self)->CanGoForward();
}

void CEF_CALLBACK tab_go_forward(struct _cef_tab_t* self)
{
  DCHECK(self);
  if(!self)
    return;

  CefTabCppToC::Get(self)->GoForward();
}

int CEF_CALLBACK tab_is_loading(struct _cef_tab_t* self)
{
  DCHECK(self);
  if(!self)
    return false;

  return CefTabCppToC::Get(self)->IsLoading();
}

void CEF_CALLBACK tab_reload(struct _cef_tab_t* self)
{
  DCHECK(self);
  if(!self)
    return;

  CefTabCppToC::Get(self)->Reload();
}

void CEF_CALLBACK tab_stop_load(struct _cef_tab_t* self)
{
  DCHECK(self);
  if(!self)
    return;

  CefTabCppToC::Get(self)->StopLoad();
}

cef_string_t CEF_CALLBACK tab_get_address(struct _cef_tab_t* self)
{
  DCHECK(self);
  if(!self)
    return NULL;

  std::wstring addressStr = CefTabCppToC::Get(self)->GetAddress();
  if(!addressStr.empty())
    return cef_string_alloc(addressStr.c_str());
  return NULL;
}

cef_string_t CEF_CALLBACK tab_get_title(struct _cef_tab_t* self)
{
  DCHECK(self);
  if(!self)
    return NULL;

  std::wstring titleStr = CefTabCppToC::Get(self)->GetTitle();
  if(!titleStr.empty())
    return cef_string_alloc(titleStr.c_str());
  return NULL;
}

void CEF_CALLBACK tab_undo(struct _cef_tab_t* self)
{
  DCHECK(self);
  if(!self)
    return;

  CefTabCppToC::Get(self)->Undo();
}

void CEF_CALLBACK tab_redo(struct _cef_tab_t* self)
{
  DCHECK(self);
  if(!self)
    return;

  CefTabCppToC::Get(self)->Redo();
}

void CEF_CALLBACK tab_cut(struct _cef_tab_t* self)
{
  DCHECK(self);
  if(!self)
    return;

  CefTabCppToC::Get(self)->Cut();
}

void CEF_CALLBACK tab_copy(struct _cef_tab_t* self)
{
  DCHECK(self);
  if(!self)
    return;

  CefTabCppToC::Get(self)->Copy();
}

void CEF_CALLBACK tab_paste(struct _cef_tab_t* self)
{
  DCHECK(self);
  if(!self)
    return;

  CefTabCppToC::Get(self)->Paste();
}

void CEF_CALLBACK tab_del(struct _cef_tab_t* self)
{
  DCHECK(self);
  if(!self)
    return;

  CefTabCppToC::Get(self)->Delete();
}

void CEF_CALLBACK tab_select_all(struct _cef_tab_t* self)
{
  DCHECK(self);
  if(!self)
    return;

  CefTabCppToC::Get(self)->SelectAll();
}

void CEF_CALLBACK tab_print(struct _cef_tab_t* self)
{
  DCHECK(self);
  if(!self)
    return;

  CefTabCppToC::Get(self)->Print();
}

void CEF_CALLBACK tab_view_source(struct _cef_tab_t* self)
{
  DCHECK(self);
  if(!self)
    return;

  CefTabCppToC::Get(self)->ViewSource();
}

void CEF_CALLBACK tab_load_address(struct _cef_tab_t* self, const wchar_t* url,
    const wchar_t* referrer)
{
  DCHECK(self);
  if(!self)
    return;

  std::wstring urlStr, referrerStr;

  if(url)
    urlStr = url;
  if(referrer)
    referrerStr = referrer;

  CefTabCppToC::Get(self)->LoadAddress(urlStr, referrerStr);
}

void CEF_CALLBACK tab_execute_java_script(struct _cef_tab_t* self,
    const wchar_t* frame_xpath, const wchar_t* jscript)
{
  DCHECK(self);
  if(!self)
    return;

  std::wstring frameXpathStr, jscriptStr;

  if(frame_xpath)
    frameXpathStr = frame_xpath;
  if(jscript)
    jscriptStr = jscript;

  CefTabCppToC::Get(self)->ExecuteJavaScript(frameXpathStr, jscriptStr);
}


// CONSTRUCTOR - Do not edit by hand.

CefTabCppToC::CefTabCppToC(CefTab* cls)
    : CefCppToC<CefTabCppToC, CefTab, cef_tab_t>(cls)
{
  struct_.struct_.get_browser = tab_get_browser;
  struct_.struct_.destroy = tab_destroy;
  struct_.struct_.get_index = tab_get_index;
  struct_.struct_.is_selected = tab_is_selected;
  struct_.struct_.select = tab_select;
  struct_.struct_.can_go_back = tab_can_go_back;
  struct_.struct_.go_back = tab_go_back;
  struct_.struct_.can_go_forward = tab_can_go_forward;
  struct_.struct_.go_forward = tab_go_forward;
  struct_.struct_.is_loading = tab_is_loading;
  struct_.struct_.reload = tab_reload;
  struct_.struct_.stop_load = tab_stop_load;
  struct_.struct_.get_address = tab_get_address;
  struct_.struct_.get_title = tab_get_title;
  struct_.struct_.undo = tab_undo;
  struct_.struct_.redo = tab_redo;
  struct_.struct_.cut = tab_cut;
  struct_.struct_.copy = tab_copy;
  struct_.struct_.paste = tab_paste;
  struct_.struct_.del = tab_del;
  struct_.struct_.select_all = tab_select_all;
  struct_.struct_.print = tab_print;
  struct_.struct_.view_source = tab_view_source;
  struct_.struct_.load_address = tab_load_address;
  struct_.struct_.execute_java_script = tab_execute_java_script;
}

#ifdef _DEBUG
long CefCppToC<CefTabCppToC, CefTab, cef_tab_t>::DebugObjCt = 0;
#endif

