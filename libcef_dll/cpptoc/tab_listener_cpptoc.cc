// Copyright (c) 2010 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// A portion of this file was generated by the CEF translator tool.  When
// making changes by hand only do so within the body of existing function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//

#include "libcef_dll/cpptoc/tab_listener_cpptoc.h"
#include "libcef_dll/ctocpp/tab_ctocpp.h"


// MEMBER FUNCTIONS - Body may be edited by hand.

void CEF_CALLBACK tab_listener_on_create(struct _cef_tab_listener_t* self,
    struct _cef_tab_t* tab)
{
  DCHECK(self && tab);
  if(!self || !tab)
    return;

  CefTabListenerCppToC::Get(self)->OnCreate(CefTabCToCpp::Wrap(tab));
}

void CEF_CALLBACK tab_listener_on_destroy(struct _cef_tab_listener_t* self,
    struct _cef_tab_t* tab)
{
  DCHECK(self && tab);
  if(!self || !tab)
    return;

  CefTabListenerCppToC::Get(self)->OnDestroy(CefTabCToCpp::Wrap(tab));
}

void CEF_CALLBACK tab_listener_on_address_change(
    struct _cef_tab_listener_t* self, struct _cef_tab_t* tab,
    const wchar_t* url)
{
  DCHECK(self && tab);
  if(!self || !tab)
    return;

  std::wstring urlStr;
  if(url)
    urlStr = url;

  CefTabListenerCppToC::Get(self)->OnAddressChange(CefTabCToCpp::Wrap(tab),
      urlStr);
}

void CEF_CALLBACK tab_listener_on_title_change(struct _cef_tab_listener_t* self,
    struct _cef_tab_t* tab, const wchar_t* title)
{
  DCHECK(self && tab);
  if(!self || !tab)
    return;

  std::wstring titleStr;
  if(title)
    titleStr = title;

  CefTabListenerCppToC::Get(self)->OnTitleChange(CefTabCToCpp::Wrap(tab),
      titleStr);
}

void CEF_CALLBACK tab_listener_on_nav_state_change(
    struct _cef_tab_listener_t* self, struct _cef_tab_t* tab, int can_go_back,
    int can_go_forward)
{
  DCHECK(self && tab);
  if(!self || !tab)
    return;

  CefTabListenerCppToC::Get(self)->OnNavStateChange(CefTabCToCpp::Wrap(tab),
      (can_go_back ? true : false), (can_go_forward ? true : false));
}

void CEF_CALLBACK tab_listener_on_select_change(
    struct _cef_tab_listener_t* self, struct _cef_tab_t* tab, int selected)
{
  DCHECK(self && tab);
  if(!self || !tab)
    return;

  CefTabListenerCppToC::Get(self)->OnSelectChange(CefTabCToCpp::Wrap(tab),
      (selected ? true : false));
}

void CEF_CALLBACK tab_listener_on_load_start(struct _cef_tab_listener_t* self,
    struct _cef_tab_t* tab)
{
  DCHECK(self && tab);
  if(!self || !tab)
    return;

  CefTabListenerCppToC::Get(self)->OnLoadStart(CefTabCToCpp::Wrap(tab));
}

void CEF_CALLBACK tab_listener_on_load_stop(struct _cef_tab_listener_t* self,
    struct _cef_tab_t* tab)
{
  DCHECK(self && tab);
  if(!self || !tab)
    return;

  CefTabListenerCppToC::Get(self)->OnLoadStop(CefTabCToCpp::Wrap(tab));
}


// CONSTRUCTOR - Do not edit by hand.

CefTabListenerCppToC::CefTabListenerCppToC(CefTabListener* cls)
    : CefCppToC<CefTabListenerCppToC, CefTabListener, cef_tab_listener_t>(cls)
{
  struct_.struct_.on_create = tab_listener_on_create;
  struct_.struct_.on_destroy = tab_listener_on_destroy;
  struct_.struct_.on_address_change = tab_listener_on_address_change;
  struct_.struct_.on_title_change = tab_listener_on_title_change;
  struct_.struct_.on_nav_state_change = tab_listener_on_nav_state_change;
  struct_.struct_.on_select_change = tab_listener_on_select_change;
  struct_.struct_.on_load_start = tab_listener_on_load_start;
  struct_.struct_.on_load_stop = tab_listener_on_load_stop;
}

#ifdef _DEBUG
long CefCppToC<CefTabListenerCppToC, CefTabListener,
    cef_tab_listener_t>::DebugObjCt = 0;
#endif

