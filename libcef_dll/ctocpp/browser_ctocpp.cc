// Copyright (c) 2010 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// A portion of this file was generated by the CEF translator tool.  When
// making changes by hand only do so within the body of existing static and
// virtual method implementations. See the translator.README.txt file in the
// tools directory for more information.
//

#include "libcef_dll/ctocpp/browser_ctocpp.h"
#include "libcef_dll/ctocpp/profile_ctocpp.h"
#include "libcef_dll/ctocpp/tab_ctocpp.h"


// VIRTUAL METHODS - Body may be edited by hand.

CefRefPtr<CefProfile> CefBrowserCToCpp::GetProfile()
{
  if(CEF_MEMBER_MISSING(struct_, get_profile))
    return NULL;
  
  cef_profile_t* impl = struct_->get_profile(struct_);
  if(impl)
    return CefProfileCToCpp::Wrap(impl);
  return NULL;
}

void CefBrowserCToCpp::Destroy()
{
  if(CEF_MEMBER_MISSING(struct_, destroy))
    return;

  struct_->destroy(struct_);
}

std::wstring CefBrowserCToCpp::GetIdString()
{
  std::wstring str;
  if(CEF_MEMBER_MISSING(struct_, get_id_string))
    return str;

  cef_string_t cef_str = struct_->get_id_string(struct_);
  if(cef_str) {
    str = cef_str;
    cef_string_free(cef_str);
  }
  return str;
}

CefWindowHandle CefBrowserCToCpp::GetWindowHandle()
{
  if(CEF_MEMBER_MISSING(struct_, get_window_handle))
    return NULL;

  return struct_->get_window_handle(struct_);
}

CefRefPtr<CefTab> CefBrowserCToCpp::CreateTab(int index,
    const std::wstring& url, const std::wstring& referrer, bool foreground)
{
  if(CEF_MEMBER_MISSING(struct_, create_tab))
    return NULL;
  
  cef_tab_t* impl = struct_->create_tab(struct_, index, url.c_str(),
      referrer.c_str(), foreground);
  if(impl)
    return CefTabCToCpp::Wrap(impl);
  return NULL;
}

int CefBrowserCToCpp::GetTabCount()
{
  if(CEF_MEMBER_MISSING(struct_, get_tab_count))
    return NULL;

  return struct_->get_tab_count(struct_);
}

CefRefPtr<CefTab> CefBrowserCToCpp::GetTab(int index)
{
  if(CEF_MEMBER_MISSING(struct_, get_tab))
    return NULL;
  
  cef_tab_t* impl = struct_->get_tab(struct_, index);
  if(impl)
    return CefTabCToCpp::Wrap(impl);
  return NULL;
}

CefRefPtr<CefTab> CefBrowserCToCpp::GetSelectedTab()
{
  if(CEF_MEMBER_MISSING(struct_, get_selected_tab))
    return NULL;
  
  cef_tab_t* impl = struct_->get_selected_tab(struct_);
  if(impl)
    return CefTabCToCpp::Wrap(impl);
  return NULL;
}


#ifdef _DEBUG
long CefCToCpp<CefBrowserCToCpp, CefBrowser, cef_browser_t>::DebugObjCt = 0;
#endif

