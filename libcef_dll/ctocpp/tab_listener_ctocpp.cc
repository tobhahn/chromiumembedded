// Copyright (c) 2010 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// A portion of this file was generated by the CEF translator tool.  When
// making changes by hand only do so within the body of existing static and
// virtual method implementations. See the translator.README.txt file in the
// tools directory for more information.
//

#include "libcef_dll/cpptoc/tab_cpptoc.h"
#include "libcef_dll/ctocpp/tab_listener_ctocpp.h"


// VIRTUAL METHODS - Body may be edited by hand.

void CefTabListenerCToCpp::OnCreate(CefRefPtr<CefTab> tab)
{
  if(CEF_MEMBER_MISSING(struct_, on_create))
    return;

  struct_->on_create(struct_, CefTabCppToC::Wrap(tab));
}

void CefTabListenerCToCpp::OnDestroy(CefRefPtr<CefTab> tab)
{
  if(CEF_MEMBER_MISSING(struct_, on_destroy))
    return;

  struct_->on_destroy(struct_, CefTabCppToC::Wrap(tab));
}

void CefTabListenerCToCpp::OnAddressChange(CefRefPtr<CefTab> tab,
    const std::wstring& url)
{
  if(CEF_MEMBER_MISSING(struct_, on_address_change))
    return;

  struct_->on_address_change(struct_, CefTabCppToC::Wrap(tab),
      url.c_str());
}

void CefTabListenerCToCpp::OnTitleChange(CefRefPtr<CefTab> tab,
    const std::wstring& title)
{
  if(CEF_MEMBER_MISSING(struct_, on_title_change))
    return;

  struct_->on_title_change(struct_, CefTabCppToC::Wrap(tab),
      title.c_str());
}

void CefTabListenerCToCpp::OnNavStateChange(CefRefPtr<CefTab> tab,
    bool can_go_back, bool can_go_forward)
{
  if(CEF_MEMBER_MISSING(struct_, on_nav_state_change))
    return;

  struct_->on_nav_state_change(struct_, CefTabCppToC::Wrap(tab),
      can_go_back, can_go_forward);
}

void CefTabListenerCToCpp::OnSelectChange(CefRefPtr<CefTab> tab, bool selected)
{
  if(CEF_MEMBER_MISSING(struct_, on_select_change))
    return;

  struct_->on_select_change(struct_, CefTabCppToC::Wrap(tab), selected);
}

void CefTabListenerCToCpp::OnLoadStart(CefRefPtr<CefTab> tab)
{
  if(CEF_MEMBER_MISSING(struct_, on_load_start))
    return;

  struct_->on_load_start(struct_, CefTabCppToC::Wrap(tab));
}

void CefTabListenerCToCpp::OnLoadStop(CefRefPtr<CefTab> tab)
{
  if(CEF_MEMBER_MISSING(struct_, on_load_stop))
    return;

  struct_->on_load_stop(struct_, CefTabCppToC::Wrap(tab));
}


#ifdef _DEBUG
long CefCToCpp<CefTabListenerCToCpp, CefTabListener,
    cef_tab_listener_t>::DebugObjCt = 0;
#endif

