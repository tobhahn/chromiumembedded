// Copyright (c) 2010 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// A portion of this file was generated by the CEF translator tool.  When
// making changes by hand only do so within the body of existing static and
// virtual method implementations. See the translator.README.txt file in the
// tools directory for more information.
//

#include "libcef_dll/cpptoc/browser_listener_cpptoc.h"
#include "libcef_dll/cpptoc/tab_listener_cpptoc.h"
#include "libcef_dll/ctocpp/browser_ctocpp.h"
#include "libcef_dll/ctocpp/profile_ctocpp.h"


// VIRTUAL METHODS - Body may be edited by hand.

void CefProfileCToCpp::AddBrowserListener(const std::wstring& id_string,
    CefRefPtr<CefBrowserListener> listener)
{
  if(CEF_MEMBER_MISSING(struct_, add_browser_listener))
    return;

  struct_->add_browser_listener(struct_, id_string.c_str(),
      CefBrowserListenerCppToC::Wrap(listener));
}

void CefProfileCToCpp::RemoveBrowserListener(const std::wstring& id_string)
{
  if(CEF_MEMBER_MISSING(struct_, remove_browser_listener))
    return;

  struct_->remove_browser_listener(struct_, id_string.c_str());
}

void CefProfileCToCpp::AddTabListener(const std::wstring& id_string,
    CefRefPtr<CefTabListener> listener)
{
  if(CEF_MEMBER_MISSING(struct_, add_tab_listener))
    return;

  struct_->add_tab_listener(struct_, id_string.c_str(),
      CefTabListenerCppToC::Wrap(listener));
}

void CefProfileCToCpp::RemoveTabListener(const std::wstring& id_string)
{
  if(CEF_MEMBER_MISSING(struct_, remove_tab_listener))
    return;

  struct_->remove_tab_listener(struct_, id_string.c_str());
}

void CefProfileCToCpp::Destroy()
{
  if(CEF_MEMBER_MISSING(struct_, destroy))
    return;

  struct_->destroy(struct_);
}

CefRefPtr<CefBrowser> CefProfileCToCpp::CreateBrowser(
    const std::wstring& id_string, CefWindowHandle parent, int xpos, int ypos,
    int width, int height, const std::wstring& command_line)
{
  if(CEF_MEMBER_MISSING(struct_, create_browser))
    return NULL;
  
  cef_browser_t* impl = struct_->create_browser(struct_, id_string.c_str(),
      parent, xpos, ypos, width, height, command_line.c_str());
  if(impl)
    return CefBrowserCToCpp::Wrap(impl);
  return NULL;
}


#ifdef _DEBUG
long CefCToCpp<CefProfileCToCpp, CefProfile, cef_profile_t>::DebugObjCt = 0;
#endif

